openapi: 3.0.0
info:
  title: HHAM
  version: 0.0.1
  description: "API for Happy Hour Activity Management project."
servers:
  - url: "http://localhost:8080"

components:
  responses:
    Success:
      description: "Success"
      content:
        "application/json":
          schema:
            type: object
            required:
              - success
            properties:
              success:
                $ref: "#/components/schemas/Success"

    Unauthorized:
      description: "No privilege"
      content:
        "application/json":
          schema:
            type: object
            required:
              - code
              - message
            properties:
              code:
                $ref: "#/components/schemas/ErrorCode"
              message:
                $ref: "#/components/schemas/ErrorMessage"

    InvalidRequest:
      description: "Invalid request"
      content:
        "application/json":
          schema:
            type: object
            required:
              - code
              - message
            properties:
              code:
                $ref: "#/components/schemas/ErrorCode"
              message:
                $ref: "#/components/schemas/ErrorMessage"

  schemas:
    Success:
      type: boolean
      description: "Always `true`, used to indicate a non-query request finished without error"
    ErrorCode:
      type: integer
      format: int32
      description: "The error code"
    ErrorMessage:
      type: string
      description: "A message to describe the error and help identifying problem easier"

paths:
  /users:
    get:
      summary: "Get information of all users in the system"
      description: "In the future this endpoint will have a parameter to determine whether deleted users should be returned"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  success:
                    $ref: "#/components/schemas/Success"
                  data:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          type: integer
                          format: int32
                          description: "ID of the user"
                        username:
                          type: string
                          description: "Username of user account"
                        email:
                          type: string
                          description: "Email of the user"
                        displayName:
                          type: string
                          description: "The name to display in the system, username is used for login only"
                        image:
                          type: string
                          format: base64
                          description: "User profile image"
                        jobTitleId:
                          type: integer
                          format: int32
                          description: "ID of the job title"
                        isAdmin:
                          type: boolean
                          description: "A boolean value indicating whether current user is system admin or not"
                        createdOn:
                          type: string
                          format: datetime
                          description: "The date and time the user was created"
                        deletedOn:
                          type: string
                          format: datetime
                          description: "The date and time the user was deleted"
        403:
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create a new user"
      requestBody:
        description: "Information required for creating a new user"
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - username
                - password
                - email
              properties:
                username:
                  type: string
                  description: "Username for the new account"
                password:
                  type: string
                  format: password
                  description: "Password for the new account"
                email:
                  type: string
                  description: "Email of the user"
                displayName:
                  type: string
                  description: "The name to display in the system, username is used for login only"
                image:
                  type: string
                  format: base64
                  description: "User profile image"
                jobTitleId:
                  type: integer
                  format: int32
                  description: "ID of the job title"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the user"
    get:
      summary: "Get information of the user having the specified ID"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: integer
                        format: int32
                        description: "ID of the user"
                      username:
                        type: string
                        description: "Username of user account"
                      email:
                        type: string
                        description: "Email of the user"
                      displayName:
                        type: string
                        description: "The name to display in the system, username is used for login only"
                      image:
                        type: string
                        format: base64
                        description: "User profile image"
                      jobTitleId:
                        type: integer
                        format: int32
                        description: "ID of the job title"
                      admin:
                        type: boolean
                        description: "A boolean value indicating whether current user is system admin or not"
                      createdOn:
                        type: string
                        format: datetime
                        description: "The date and time the user was created"
                      deletedOn:
                        type: string
                        format: datetime
                        description: "The date and time the user was deleted"
        403:
          $ref: "#/components/responses/Unauthorized"
    put:
      summary: "Update information of the user having the specified ID"
      requestBody:
        description: |
          The information to replace existing values. Only fields submitted are updated, the rest will be kept as-is.

          If the request comes from a regular user and any of `username`, `password`, `email`, or `jobTitleId` is set, the request fails.
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: "Username of user account"
                email:
                  type: string
                  description: "Email of the user"
                jobTitleId:
                  type: integer
                  format: int32
                  description: "ID of the job title"
                displayName:
                  type: string
                  description: "The name to display in the system, username is used for login only"
                image:
                  type: string
                  format: base64
                  description: "User profile image"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: "Delete the user with the specified ID"
      description: |
        For system admin, any other user in the system can be deleted.

        For regular user, only their account can be deleted.
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /projects:
    get:
      summary: "Get information of all projects available to current user"
      description: |
        An archived project or a project the user don't have privilege to view will not be returned.

        In the future, this endpoint will get an extra parameter to get information of archived projects
        that the user have privilege to view.
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          type: integer
                          format: int32
                          description: "ID of the project"
                        name:
                          type: string
                          description: "Name of the project"
                        description:
                          type: string
                          description: "Description of the project"
                        image:
                          type: string
                          format: base64
                          description: "The project logo"
                        fund:
                          type: number
                          description: "Current fund of the project"
                        createdOn:
                          type: string
                          format: datetime
                          description: "The date and time the project was created"
                        deletedOn:
                          type: string
                          format: datetime
                          description: "The date and time the project was deleted"
        403:
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create new project"
      requestBody:
        description: "Information for the new project"
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - id
                - name
              properties:
                name:
                  type: string
                  description: "Name of the project"
                description:
                  type: string
                  description: "Description of the project"
                image:
                  type: string
                  format: base64
                  description: "The project logo"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the project"
    get:
      summary: "Get information of a specific project"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: integer
                        format: int32
                        description: "ID of the project"
                      name:
                        type: string
                        description: "Name of the project"
                      description:
                        type: string
                        description: "Description of the project"
                      image:
                        type: string
                        format: base64
                        description: "The project logo"
                      fund:
                        type: number
                        description: "Current fund of the project"
                      createdOn:
                        type: string
                        format: datetime
                        description: "The date and time the project was created"
                      deletedOn:
                        type: string
                        format: datetime
                        description: "The date and time the project was deleted."
        403:
          $ref: "#/components/responses/Unauthorized"
    put:
      summary: "Update information of a project"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - id
              properties:
                name:
                  type: string
                  description: "Name of the project"
                description:
                  type: string
                  description: "Description of the project"
                image:
                  type: string
                  format: base64
                  description: "The project logo"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: "Delete the project from the system"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /activities:
    get:
      summary: "Get all activities in the specified project"
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int32
          description: "ID of the project"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          type: integer
                          format: int32
                          description: "ID of the activity"
                        name:
                          type: string
                          description: "Name of the activity"
                        description:
                          type: string
                          description: "Description of the activity"
                        typeId:
                          type: integer
                          format: int32
                          description: "ID of the activity type"
                        createdOn:
                          type: string
                          format: datetime
                          description: "The date and time the activity was created"
                        lockedOn:
                          type: string
                          format: datetime
                          description: "The date and time the activity was locked"
                        archivedOn:
                          type: string
                          format: datetime
                          description: "The date and time the activity was archived"
        403:
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Add a new activity to the project"
      requestBody:
        description: "Information of the new activity"
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - name
                - typeId
              properties:
                name:
                  type: string
                  description: "Name of the activity"
                description:
                  type: string
                  description: "Description of the activity"
                projects:
                  type: array
                  items:
                    type: integer
                    format: int32
                  description: |
                    ID of projects holding the activity. At this time this array is always of size 1
                    because activity belongs to project, but in future version it will change.
                typeId:
                  type: integer
                  format: int32
                  description: "ID of the activity type used for the activity. At this time only `1` is valid"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /projects/{id}/admins:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the project"
    get:
      summary: "Get information of all admins of the specified project"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    description: "An array containing information of project admins"
                    items:
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          type: integer
                          format: int32
                          description: "ID of the user"
                        username:
                          type: string
                          description: "Username of user account"
                        email:
                          type: string
                          description: "Email of the user"
                        displayName:
                          type: string
                          description: "The name to display in the system, username is used for login only"
                        image:
                          type: string
                          format: base64
                          description: "User profile image"
                        jobTitleId:
                          type: integer
                          format: int32
                          description: "ID of the job title"
                        isAdmin:
                          type: boolean
                          description: "A boolean value indicating whether current user is system admin or not"
                        createdOn:
                          type: string
                          format: datetime
                          description: "The date and time the user was created"
                        deletedOn:
                          type: string
                          format: datetime
                          description: "The date and time the user was deleted"
        403:
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Add a new admin for the project"
      description: "The user must be in the project before being promoted to project admin"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  format: int32
                  description: "ID of the user to promote to project admin"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /projects/{id}/members:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the project"
    get:
      summary: "Get information of all members in the specified project"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    description: "An array containing information of project members"
                    items:
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          type: integer
                          format: int32
                          description: "ID of the user"
                        username:
                          type: string
                          description: "Username of user account"
                        email:
                          type: string
                          description: "Email of the user"
                        displayName:
                          type: string
                          description: "The name to display in the system, username is used for login only"
                        image:
                          type: string
                          format: base64
                          description: "User profile image"
                        jobTitleId:
                          type: integer
                          format: int32
                          description: "ID of the job title"
                        isAdmin:
                          type: boolean
                          description: "A boolean value indicating whether current user is system admin or not"
                        createdOn:
                          type: string
                          format: datetime
                          description: "The date and time the user was created"
                        deletedOn:
                          type: string
                          format: datetime
                          description: "The date and time the user was deleted"
        403:
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Add a new user to project"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  format: int32
                  description: "ID of the user to add"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /projects/{id}/admins/{adminId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the project"
      - name: adminId
        in: path
        required: true
        description: "ID of the admin to remove from the project"
        schema:
          type: integer
          format: int32
    delete:
      summary: "Demote a project admin"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /activities/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the activity"
    get:
      summary: "Get information about a specific activity"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: integer
                        format: int32
                        description: "ID of the activity"
                      name:
                        type: string
                        description: "Name of the activity"
                      description:
                        type: string
                        description: "Description of the activity"
                      typeId:
                        type: integer
                        format: int32
                        description: "ID of the activity type used for the activity. At this time only `1` is valid"
                      createdOn:
                        type: string
                        format: datetime
                        description: "The date and time the activity was created"
                      lockedOn:
                        type: string
                        format: datetime
                        description: "The date and time the activity was locked"
                      deletedOn:
                        type: string
                        format: datetime
                        description: "The date and time the activity was deleted"
        403:
          $ref: "#/components/responses/Unauthorized"
    put:
      summary: "Update activity information"
      description: |
        If the activity type is changed from type with options to type without options,
        all existing options in the activity will be deleted.
      requestBody:
        required: true
        description: "New information to replace the existing ones in the activity"
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Name of the activity"
                description:
                  type: string
                  description: "Description of the activity"
                typeId:
                  type: integer
                  format: int32
                  description: "ID of the activity type to use"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: "Delete the specified unfinished activity"
      description: "When an activity is finished, it is archived and can't be deleted anymore"
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/InvalidRequest"
        403:
          $ref: "#/components/responses/Unauthorized"
  /activities/{id}/lock:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the activity"
    put:
      summary: "Lock/unlock voting in an activity"
      requestBody:
        required: true
        description: "The lock state to change to"
        content:
          "application/json":
            schema:
              type: object
              required:
                - lock
              properties:
                lock:
                  type: boolean
                  description: "`true` to lock, `false` to unlock"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /activities/{id}/finish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the activity"
    put:
      summary: "Mark the activity finished and archive it"
      description: "The expense will be recorded"
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/InvalidRequest"
        403:
          $ref: "#/components/responses/Unauthorized"
  /options:
    parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the activity"
    get:
      summary: "Get all options in the activity"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    description: "An array containing information of options"
                    items:
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          type: integer
                          format: int32
                          description: "ID of the option"
                        name:
                          type: string
                          description: "Name of the option"
                        price:
                          type: number
                          description: "Price of the option"
                        image:
                          type: string
                          format: base64
                          description: "Image of the option"
                        createdOn:
                          type: string
                          format: datetime
                          description: "The date and time the option was created"
        403:
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Add a new option to the activity"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - name
                - price
              properties:
                name:
                  type: string
                  description: "Name of the option"
                price:
                  type: number
                  description: "Price of the option"
                image:
                  type: string
                  format: base64
                  description: "Image about the option"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /options/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the option"
    get:
      summary: "Get information of the specified option"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: integer
                        format: int32
                        description: "ID of the option"
                      activityId:
                        type: integer
                        format: int32
                        description: "ID of the activity owning the option"
                      name:
                        type: string
                        description: "Name of the option"
                      image:
                        type: string
                        format: base64
                        description: "Sample image of the option"
                      price:
                        type: number
                        description: "Price of the option"
                      createdOn:
                        type: string
                        format: datetime
                        description: "The date and time the option was created"
        403:
          $ref: "#/components/responses/Unauthorized"
    put:
      summary: "Update information of a specific option"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Name of the option"
                price:
                  type: number
                  description: "Price of the option"
                image:
                  type: string
                  format: base64
                  description: "Image about the option"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: "Delete the specified option"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /options/{id}/vote:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
        description: "ID of the option"
    put:
      summary: "Vote for the specified option"
      description: "If there is an existing vote in the activity, the old vote will be revoked"
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/InvalidRequest"
        403:
          $ref: "#/components/responses/Unauthorized"
  /transactions:
    get:
      summary: "Get all transactions involving the specified entity"
      description: |
        The transactions can be filtered by project ID, user ID, activity ID, or any combination of them.
      parameters:
        - name: userId
          in: query
          required: false
          description: "ID of the user to filter transaction"
          schema:
            type: integer
            format: int32
        - name: projectId
          in: query
          required: false
          description: "ID of the project to filter transaction"
          schema:
            type: integer
            format: int32
        - name: activityId
          in: query
          required: false
          description: "ID of the activity to filter transaction"
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    description: "An array containing information of transactions matched the criteria"
                    items:
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          type: integer
                          format: int32
                          description: "ID of the transaction"
                        typeId:
                          type: integer
                          format: int32
                          description: "ID of the transaction type"
                        amount:
                          type: number
                          description: "The amount changed by the transaction"
                        memo:
                          type: string
                          description: "Short description about the purpose of the transaction"
                        userId:
                          type: integer
                          format: int32
                          description: "ID of the user involved"
                        projectId:
                          type: integer
                          format: int32
                          description: "ID of the project involved"
                        activityId:
                          type: integer
                          format: int32
                          description: "ID of the activity involved (if exists)"
                        createdOn:
                          type: string
                          format: datetime
                          description: "The time the transaction is created"
        403:
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create a new transaction"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - userId
                - projectId
                - amount
                - typeId
                - memo
              properties:
                userId:
                  type: integer
                  format: int32
                  description: "ID of the user involving in the transaction"
                projectId:
                  type: integer
                  format: int32
                  description: "ID of the project involving in the transaction"
                activityId:
                  type: integer
                  format: int32
                  description: "ID of the activity involving in the transaction (if exists)"
                amount:
                  type: number
                  description: "The amount changed after the transaction"
                typeId:
                  type: integer
                  format: int32
                  description: "ID of the transaction type"
                memo:
                  type: string
                  description: "A short description about the purpose of the transaction"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /jobs:
    get:
      parameters:
      - name: name
        in: query
        required: false
        description: "The string to search, any job title whose name contains this string will be returned"
        schema:
          type: string
      summary: "Get all job titles still in use"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    description: "An array containing information of all job titles still in use"
                    items:
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          type: integer
                          format: int32
                          description: "ID of the job title"
                        name:
                          type: string
                          description: "Name of the job title"
                        amount:
                          type: number
                          description: "Monthly funding amount required for a user with this job title"
        403:
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create a new job title"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - name
                - amount
              properties:
                name:
                  type: string
                  description: "Name for the new job title"
                amount:
                  type: number
                  description: "Monthly funding amount required for the job title"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
  /jobs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: "ID of the job title"
        schema:
          type: integer
          format: int32
    get:
      summary: "Get information of a job title"
      responses:
        200:
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    description: "Information of the job title"
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: integer
                        format: int32
                        description: "ID of the job title"
                      name:
                        type: string
                        description: "Name of the job title"
                      amount:
                        type: number
                        description: "The funding amount required per month"
                      createdOn:
                        type: string
                        format: datetime
                        description: "The date and time the job title was put in effect"
                      archivedOn:
                        type: string
                        format: datetime
                        description: "The date and time the job title was archived (no longer in use)"
        403:
          $ref: "#/components/responses/Unauthorized"
    put:
      summary: "Edit a job title"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Name for the new job title"
                amount:
                  type: number
                  description: "Monthly funding amount required"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: "Archive a job title"
      responses:
        200:
          $ref: "#/components/responses/Success"
        403:
          $ref: "#/components/responses/Unauthorized"
    # TODO: Add description for all API elements
    # TODO: Extract duplicated parts into components
